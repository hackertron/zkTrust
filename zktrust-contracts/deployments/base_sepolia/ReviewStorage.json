{
  "address": "0x9F010B5CBb173514F3e53F44362D39359DC3Fa47",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reviewId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "productId",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "reviewer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "rating",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "serviceName",
          "type": "string"
        }
      ],
      "name": "ReviewAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reviewId",
          "type": "uint256"
        }
      ],
      "name": "ReviewDeleted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "reviewId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "newContent",
          "type": "string"
        }
      ],
      "name": "ReviewUpdated",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "productId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "reviewerAddress",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "rating",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "nullifier",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "serviceName",
          "type": "string"
        }
      ],
      "name": "addReview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reviewId",
          "type": "uint256"
        }
      ],
      "name": "deleteReview",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "productId",
          "type": "bytes32"
        }
      ],
      "name": "getProductReviews",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reviewId",
          "type": "uint256"
        }
      ],
      "name": "getReview",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "productId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "reviewer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "rating",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "serviceName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "reviewer",
          "type": "address"
        }
      ],
      "name": "getReviewerReviews",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_nullifier",
          "type": "bytes32"
        }
      ],
      "name": "isNullifierUsed",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isUsed",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "productReviews",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reviewCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reviewerReviews",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "reviews",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "productId",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "reviewer",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "content",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "rating",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "nullifier",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "serviceName",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reviewId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "newContent",
          "type": "string"
        }
      ],
      "name": "updateReviewContent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "usedNullifiers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x51fb3c1ccd45cdfbf75723c605333bdd90348ef48d303fa75068da1ad4ae2f78",
  "receipt": {
    "to": null,
    "from": "0x53e7eD571fdBA153040c9aAD925203f191ebcaAd",
    "contractAddress": "0x9F010B5CBb173514F3e53F44362D39359DC3Fa47",
    "transactionIndex": 67,
    "gasUsed": "1128301",
    "logsBloom": "0x
    "blockHash": "0x999ea27e4abd2b22022627a65006aa076634adc1486aa2aaf1ecb53bdafe8ed1",
    "transactionHash": "0x51fb3c1ccd45cdfbf75723c605333bdd90348ef48d303fa75068da1ad4ae2f78",
    "logs": [
      {
        "transactionIndex": 67,
        "blockNumber": 25374736,
        "transactionHash": "0x51fb3c1ccd45cdfbf75723c605333bdd90348ef48d303fa75068da1ad4ae2f78",
        "address": "0x9F010B5CBb173514F3e53F44362D39359DC3Fa47",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000053e7ed571fdba153040c9aad925203f191ebcaad"
        ],
        "data": "0x",
        "logIndex": 30,
        "blockHash": "0x999ea27e4abd2b22022627a65006aa076634adc1486aa2aaf1ecb53bdafe8ed1"
      }
    ],
    "blockNumber": 25374736,
    "cumulativeGasUsed": "5160042",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a0632cd0c1a0c4f092450a1089796c1c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reviewId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"reviewer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"rating\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"serviceName\",\"type\":\"string\"}],\"name\":\"ReviewAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reviewId\",\"type\":\"uint256\"}],\"name\":\"ReviewDeleted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"reviewId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"newContent\",\"type\":\"string\"}],\"name\":\"ReviewUpdated\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reviewerAddress\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rating\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"serviceName\",\"type\":\"string\"}],\"name\":\"addReview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reviewId\",\"type\":\"uint256\"}],\"name\":\"deleteReview\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"}],\"name\":\"getProductReviews\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reviewId\",\"type\":\"uint256\"}],\"name\":\"getReview\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reviewer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rating\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"serviceName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"reviewer\",\"type\":\"address\"}],\"name\":\"getReviewerReviews\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_nullifier\",\"type\":\"bytes32\"}],\"name\":\"isNullifierUsed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isUsed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"productReviews\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reviewCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reviewerReviews\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"reviews\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"productId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"reviewer\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"content\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"rating\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"serviceName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reviewId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"newContent\",\"type\":\"string\"}],\"name\":\"updateReviewContent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"usedNullifiers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Assumes cryptographic proof validity was checked before registry interaction.      Ownable for potential future administrative functions (e.g., migration).\",\"errors\":{\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addReview(bytes32,address,string,uint8,bytes32,string)\":{\"details\":\"Adds a new review. Intended to be called only by the ReviewRegistry contract.\",\"params\":{\"content\":\"Review text content.\",\"nullifier\":\"Unique identifier from ZK proof (MUST be unique).\",\"productId\":\"ID of the product being reviewed.\",\"rating\":\"Numerical rating (1-5).\",\"reviewerAddress\":\"Address of the user submitting the review.\",\"serviceName\":\"Name of the service (e.g., \\\"Gumroad\\\", \\\"Luma\\\").\"},\"returns\":{\"_0\":\"The ID of the newly added review.\"}},\"constructor\":{\"details\":\"Constructor sets the initial owner of the contract.\"},\"deleteReview(uint256)\":{\"details\":\"Allows the original reviewer or the contract owner to \\\"delete\\\" a review      by clearing its content. The review entry itself remains.\",\"params\":{\"reviewId\":\"ID of the review to delete.\"}},\"getProductReviews(bytes32)\":{\"details\":\"Gets all review IDs for a specific product.\",\"params\":{\"productId\":\"ID of the product.\"},\"returns\":{\"_0\":\"Array of review IDs.\"}},\"getReview(uint256)\":{\"details\":\"Retrieves a review by its ID.\",\"params\":{\"reviewId\":\"ID of the review to retrieve.\"},\"returns\":{\"content\":\"Review content.\",\"id\":\"Review ID.\",\"productId\":\"Product ID.\",\"rating\":\"Review rating.\",\"reviewer\":\"Address of the reviewer.\",\"serviceName\":\"Name of the service.\",\"timestamp\":\"Review timestamp.\"}},\"getReviewerReviews(address)\":{\"details\":\"Gets all review IDs submitted by a specific reviewer.\",\"params\":{\"reviewer\":\"Address of the reviewer.\"},\"returns\":{\"_0\":\"Array of review IDs.\"}},\"isNullifierUsed(bytes32)\":{\"details\":\"Public view function to check if a nullifier has been used.      Can be called by ReviewRegistry or external entities.\",\"params\":{\"_nullifier\":\"The nullifier to check.\"},\"returns\":{\"isUsed\":\"True if the nullifier exists in the usedNullifiers mapping.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updateReviewContent(uint256,string)\":{\"details\":\"Allows the original reviewer to update the content of their review.\",\"params\":{\"newContent\":\"New review content.\",\"reviewId\":\"ID of the review to update.\"}}},\"title\":\"ReviewStorage\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addReview(bytes32,address,string,uint8,bytes32,string)\":{\"notice\":\"Checks for nullifier uniqueness before storing.\"}},\"notice\":\"Stores reviews submitted through the ReviewRegistry and enforces nullifier uniqueness.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ReviewStorage.sol\":\"ReviewStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"contracts/ReviewStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\n/**\\n * @title ReviewStorage\\n * @notice Stores reviews submitted through the ReviewRegistry and enforces nullifier uniqueness.\\n * @dev Assumes cryptographic proof validity was checked before registry interaction.\\n *      Ownable for potential future administrative functions (e.g., migration).\\n */\\ncontract ReviewStorage is Ownable {\\n    // Total number of reviews stored\\n    uint256 public reviewCount;\\n\\n    // Review struct\\n    struct Review {\\n        uint256 id; // Unique ID for the review\\n        bytes32 productId; // ID of the product reviewed\\n        address reviewer; // Address of the original reviewer\\n        string content; // Text content of the review\\n        uint8 rating; // Numerical rating (1-5)\\n        bytes32 nullifier; // Unique identifier from the ZK proof to prevent duplicates\\n        uint256 timestamp; // Timestamp of submission\\n        string serviceName; // Name of the service/platform where interaction occurred (e.g., \\\"Gumroad\\\")\\n    }\\n\\n    // --- Mappings ---\\n    // Maps review ID to Review struct\\n    mapping(uint256 => Review) public reviews;\\n    // Maps product ID to an array of review IDs for that product\\n    mapping(bytes32 => uint256[]) public productReviews;\\n    // Maps reviewer address to an array of review IDs submitted by that reviewer\\n    mapping(address => uint256[]) public reviewerReviews;\\n    // Maps nullifier hash to boolean indicating if it has been used\\n    // Public visibility allows external checks (e.g., by ReviewRegistry or frontend)\\n    mapping(bytes32 => bool) public usedNullifiers;\\n\\n    // --- Events ---\\n    event ReviewAdded(\\n        uint256 indexed reviewId,\\n        bytes32 indexed productId,\\n        address indexed reviewer,\\n        uint8 rating,\\n        string serviceName\\n    );\\n    event ReviewUpdated(uint256 indexed reviewId, string newContent);\\n    event ReviewDeleted(uint256 indexed reviewId); // Note: Content is cleared, not deleted\\n\\n    /**\\n     * @dev Constructor sets the initial owner of the contract.\\n     */\\n    constructor() Ownable(msg.sender) {}\\n\\n    /**\\n     * @dev Adds a new review. Intended to be called only by the ReviewRegistry contract.\\n     * @notice Checks for nullifier uniqueness before storing.\\n     * @param productId ID of the product being reviewed.\\n     * @param reviewerAddress Address of the user submitting the review.\\n     * @param content Review text content.\\n     * @param rating Numerical rating (1-5).\\n     * @param nullifier Unique identifier from ZK proof (MUST be unique).\\n     * @param serviceName Name of the service (e.g., \\\"Gumroad\\\", \\\"Luma\\\").\\n     * @return The ID of the newly added review.\\n     */\\n    function addReview(\\n        bytes32 productId,\\n        address reviewerAddress, // Passed explicitly by ReviewRegistry\\n        string calldata content,\\n        uint8 rating,\\n        bytes32 nullifier,\\n        string calldata serviceName /* onlyReviewRegistry */\\n    ) external returns (uint256) {\\n        // Access Control Idea: Add a check `require(msg.sender == reviewRegistryAddress, \\\"Only registry allowed\\\");`\\n        // if you deploy ReviewRegistry address immutably or add a setter function for it.\\n        // For now, relying on the system design where only ReviewRegistry calls this.\\n\\n        require(\\n            reviewerAddress != address(0),\\n            \\\"Reviewer address cannot be zero\\\"\\n        );\\n        require(rating >= 1 && rating <= 5, \\\"Rating must be between 1 and 5\\\");\\n\\n        // --- Primary Nullifier Check ---\\n        // Prevents the same proof/purchase from being used for multiple reviews via this contract.\\n        require(!usedNullifiers[nullifier], \\\"Storage: Nullifier already used\\\");\\n        usedNullifiers[nullifier] = true; // Mark as used immediately\\n\\n        // Increment review count and assign ID\\n        reviewCount++;\\n        uint256 newReviewId = reviewCount;\\n\\n        // Create and store the review\\n        reviews[newReviewId] = Review({\\n            id: newReviewId,\\n            productId: productId,\\n            reviewer: reviewerAddress, // Use the passed reviewer address\\n            content: content,\\n            rating: rating,\\n            nullifier: nullifier,\\n            timestamp: block.timestamp,\\n            serviceName: serviceName\\n        });\\n\\n        // Update lookup mappings\\n        productReviews[productId].push(newReviewId);\\n        reviewerReviews[reviewerAddress].push(newReviewId); // Use the passed reviewer address\\n\\n        // Emit event with correct reviewer address\\n        emit ReviewAdded(\\n            newReviewId,\\n            productId,\\n            reviewerAddress,\\n            rating,\\n            serviceName\\n        );\\n\\n        return newReviewId;\\n    }\\n\\n    /**\\n     * @dev Retrieves a review by its ID.\\n     * @param reviewId ID of the review to retrieve.\\n     * @return id Review ID.\\n     * @return productId Product ID.\\n     * @return reviewer Address of the reviewer.\\n     * @return content Review content.\\n     * @return rating Review rating.\\n     * @return timestamp Review timestamp.\\n     * @return serviceName Name of the service.\\n     */\\n    function getReview(\\n        uint256 reviewId\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 id,\\n            bytes32 productId,\\n            address reviewer,\\n            string memory content,\\n            uint8 rating,\\n            uint256 timestamp,\\n            string memory serviceName\\n        )\\n    {\\n        require(reviewId > 0 && reviewId <= reviewCount, \\\"Invalid review ID\\\");\\n        Review storage review = reviews[reviewId];\\n        return (\\n            review.id,\\n            review.productId,\\n            review.reviewer,\\n            review.content,\\n            review.rating,\\n            review.timestamp,\\n            review.serviceName\\n        );\\n    }\\n\\n    /**\\n     * @dev Gets all review IDs for a specific product.\\n     * @param productId ID of the product.\\n     * @return Array of review IDs.\\n     */\\n    function getProductReviews(\\n        bytes32 productId\\n    ) external view returns (uint256[] memory) {\\n        return productReviews[productId];\\n    }\\n\\n    /**\\n     * @dev Gets all review IDs submitted by a specific reviewer.\\n     * @param reviewer Address of the reviewer.\\n     * @return Array of review IDs.\\n     */\\n    function getReviewerReviews(\\n        address reviewer\\n    ) external view returns (uint256[] memory) {\\n        return reviewerReviews[reviewer];\\n    }\\n\\n    /**\\n     * @dev Allows the original reviewer to update the content of their review.\\n     * @param reviewId ID of the review to update.\\n     * @param newContent New review content.\\n     */\\n    function updateReviewContent(\\n        uint256 reviewId,\\n        string calldata newContent\\n    ) external {\\n        require(reviewId > 0 && reviewId <= reviewCount, \\\"Invalid review ID\\\");\\n        // Check against the stored reviewer address\\n        require(\\n            msg.sender == reviews[reviewId].reviewer,\\n            \\\"Not the review owner\\\"\\n        );\\n\\n        reviews[reviewId].content = newContent;\\n        emit ReviewUpdated(reviewId, newContent);\\n    }\\n\\n    /**\\n     * @dev Allows the original reviewer or the contract owner to \\\"delete\\\" a review\\n     *      by clearing its content. The review entry itself remains.\\n     * @param reviewId ID of the review to delete.\\n     */\\n    function deleteReview(uint256 reviewId) external {\\n        require(reviewId > 0 && reviewId <= reviewCount, \\\"Invalid review ID\\\");\\n        require(\\n            msg.sender == reviews[reviewId].reviewer || msg.sender == owner(),\\n            \\\"Not authorized to delete\\\"\\n        );\\n\\n        // Clear content instead of actual deletion to preserve history/ID sequence\\n        reviews[reviewId].content = \\\"\\\";\\n        // Consider clearing rating or adding a 'deleted' flag if needed elsewhere\\n        // reviews[reviewId].rating = 0;\\n\\n        emit ReviewDeleted(reviewId);\\n    }\\n\\n    /**\\n     * @dev Public view function to check if a nullifier has been used.\\n     *      Can be called by ReviewRegistry or external entities.\\n     * @param _nullifier The nullifier to check.\\n     * @return isUsed True if the nullifier exists in the usedNullifiers mapping.\\n     */\\n    function isNullifierUsed(\\n        bytes32 _nullifier\\n    ) external view returns (bool isUsed) {\\n        return usedNullifiers[_nullifier];\\n    }\\n}\\n\",\"keccak256\":\"0x5d6335574b3ce07f24f80f37eb5c7c1a50ae40955cbee6e269ec834abdd47d25\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100f55760003560e01c8063b526701111610097578063eb55abdf11610066578063eb55abdf14610241578063eff5924f14610254578063f2fde38b1461025d578063f30572c41461027057600080fd5b8063b5267011146101e1578063cff845aa146101f4578063d71e489014610207578063e83ddcea1461021a57600080fd5b806360c5a8dd116100d357806360c5a8dd14610175578063715018a6146101965780638da5cb5b146101a0578063990581b6146101bb57600080fd5b8063206137aa146100fa57806322dc7b4c1461013257806332d6418d14610155575b600080fd5b61011d610108366004610cb1565b60056020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b61011d610140366004610cb1565b60009081526005602052604090205460ff1690565b610168610163366004610ce6565b610283565b6040516101299190610d08565b610188610183366004610d95565b6102ef565b604051908152602001610129565b61019e61062b565b005b6000546040516001600160a01b039091168152602001610129565b6101ce6101c9366004610cb1565b61063f565b6040516101299796959493929190610e89565b61019e6101ef366004610ee5565b6107f2565b610188610202366004610f31565b6108dd565b61019e610215366004610cb1565b61090e565b61022d610228366004610cb1565b610a14565b604051610129989796959493929190610f53565b61018861024f366004610fbd565b610b7a565b61018860015481565b61019e61026b366004610ce6565b610b96565b61016861027e366004610cb1565b610bd4565b6001600160a01b0381166000908152600460209081526040918290208054835181840281018401909452808452606093928301828280156102e357602002820191906000526020600020905b8154815260200190600101908083116102cf575b50505050509050919050565b60006001600160a01b03881661034c5760405162461bcd60e51b815260206004820152601f60248201527f526576696577657220616464726573732063616e6e6f74206265207a65726f0060448201526064015b60405180910390fd5b60018560ff1610158015610364575060058560ff1611155b6103b05760405162461bcd60e51b815260206004820152601e60248201527f526174696e67206d757374206265206265747765656e203120616e64203500006044820152606401610343565b60008481526005602052604090205460ff161561040f5760405162461bcd60e51b815260206004820152601f60248201527f53746f726167653a204e756c6c696669657220616c72656164792075736564006044820152606401610343565b6000848152600560205260408120805460ff1916600190811790915580549161043783610fe7565b9190505550600060015490506040518061010001604052808281526020018b81526020018a6001600160a01b0316815260200189898080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050509082525060ff881660208083019190915260408083018990524260608401528051601f8801839004830281018301909152868152608090920191908790879081908401838280828437600092018290525093909452505083815260026020818152604092839020855181559085015160018201559184015190820180546001600160a01b0319166001600160a01b039092169190911790556060830151909150600382019061054e90826110ad565b50608082015160048201805460ff191660ff90921691909117905560a0820151600582015560c0820151600682015560e0820151600782019061059190826110ad565b50505060008a8152600360209081526040808320805460018181018355918552838520018590556001600160a01b038d16808552600484528285208054928301815585529290932090920183905590518b9083907ffd8e2f0860a115e77d5ac876beeabd417d865f68bafb03b2150414b7056b4fdb90610616908b908a908a90611196565b60405180910390a49998505050505050505050565b610633610c34565b61063d6000610c61565b565b60008060006060600080606060008811801561065d57506001548811155b6106795760405162461bcd60e51b8152600401610343906111bc565b6000888152600260208190526040909120805460018201549282015460048301546006840154600385018054959694956001600160a01b0390941693909260ff169190600788019084906106cc90611024565b80601f01602080910402602001604051908101604052809291908181526020018280546106f890611024565b80156107455780601f1061071a57610100808354040283529160200191610745565b820191906000526020600020905b81548152906001019060200180831161072857829003601f168201915b5050505050935080805461075890611024565b80601f016020809104026020016040519081016040528092919081815260200182805461078490611024565b80156107d15780601f106107a6576101008083540402835291602001916107d1565b820191906000526020600020905b8154815290600101906020018083116107b457829003601f168201915b50505050509050975097509750975097509750975050919395979092949650565b60008311801561080457506001548311155b6108205760405162461bcd60e51b8152600401610343906111bc565b600083815260026020819052604090912001546001600160a01b031633146108815760405162461bcd60e51b81526020600482015260146024820152732737ba103a3432903932bb34b2bb9037bbb732b960611b6044820152606401610343565b600083815260026020526040902060030161089d8284836111e7565b50827ff2624643792d87ba20a8f38559332dcf8e0c101399d21c21c83fd4d6351dbd9283836040516108d09291906112a8565b60405180910390a2505050565b600360205281600052604060002081815481106108f957600080fd5b90600052602060002001600091509150505481565b60008111801561092057506001548111155b61093c5760405162461bcd60e51b8152600401610343906111bc565b600081815260026020819052604090912001546001600160a01b031633148061096f57506000546001600160a01b031633145b6109bb5760405162461bcd60e51b815260206004820152601860248201527f4e6f7420617574686f72697a656420746f2064656c65746500000000000000006044820152606401610343565b60408051602080820183526000808352848152600290915291909120600301906109e590826110ad565b5060405181907fe5b8d5ce0f468eff18b88328bfdf877d45b5aa6359e0df3ac054656b7acf9b1590600090a250565b600260208190526000918252604090912080546001820154928201546003830180549294936001600160a01b0390921692610a4e90611024565b80601f0160208091040260200160405190810160405280929190818152602001828054610a7a90611024565b8015610ac75780601f10610a9c57610100808354040283529160200191610ac7565b820191906000526020600020905b815481529060010190602001808311610aaa57829003601f168201915b505050600484015460058501546006860154600787018054969760ff9094169692955090935090610af790611024565b80601f0160208091040260200160405190810160405280929190818152602001828054610b2390611024565b8015610b705780601f10610b4557610100808354040283529160200191610b70565b820191906000526020600020905b815481529060010190602001808311610b5357829003601f168201915b5050505050905088565b600460205281600052604060002081815481106108f957600080fd5b610b9e610c34565b6001600160a01b038116610bc857604051631e4fbdf760e01b815260006004820152602401610343565b610bd181610c61565b50565b6000818152600360209081526040918290208054835181840281018401909452808452606093928301828280156102e357602002820191906000526020600020908154815260200190600101908083116102cf5750505050509050919050565b6000546001600160a01b0316331461063d5760405163118cdaa760e01b8152336004820152602401610343565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600060208284031215610cc357600080fd5b5035919050565b80356001600160a01b0381168114610ce157600080fd5b919050565b600060208284031215610cf857600080fd5b610d0182610cca565b9392505050565b6020808252825182820181905260009190848201906040850190845b81811015610d4057835183529284019291840191600101610d24565b50909695505050505050565b60008083601f840112610d5e57600080fd5b50813567ffffffffffffffff811115610d7657600080fd5b602083019150836020828501011115610d8e57600080fd5b9250929050565b60008060008060008060008060c0898b031215610db157600080fd5b88359750610dc160208a01610cca565b9650604089013567ffffffffffffffff80821115610dde57600080fd5b610dea8c838d01610d4c565b909850965060608b0135915060ff82168214610e0557600080fd5b90945060808a0135935060a08a01359080821115610e2257600080fd5b50610e2f8b828c01610d4c565b999c989b5096995094979396929594505050565b6000815180845260005b81811015610e6957602081850181015186830182015201610e4d565b506000602082860101526020601f19601f83011685010191505092915050565b87815286602082015260018060a01b038616604082015260e060608201526000610eb660e0830187610e43565b60ff861660808401528460a084015282810360c0840152610ed78185610e43565b9a9950505050505050505050565b600080600060408486031215610efa57600080fd5b83359250602084013567ffffffffffffffff811115610f1857600080fd5b610f2486828701610d4c565b9497909650939450505050565b60008060408385031215610f4457600080fd5b50508035926020909101359150565b888152602081018890526001600160a01b038716604082015261010060608201819052600090610f8583820189610e43565b905060ff871660808401528560a08401528460c084015282810360e0840152610fae8185610e43565b9b9a5050505050505050505050565b60008060408385031215610fd057600080fd5b610fd983610cca565b946020939093013593505050565b60006001820161100757634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052604160045260246000fd5b600181811c9082168061103857607f821691505b60208210810361105857634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156110a857600081815260208120601f850160051c810160208610156110855750805b601f850160051c820191505b818110156110a457828155600101611091565b5050505b505050565b815167ffffffffffffffff8111156110c7576110c761100e565b6110db816110d58454611024565b8461105e565b602080601f83116001811461111057600084156110f85750858301515b600019600386901b1c1916600185901b1785556110a4565b600085815260208120601f198616915b8281101561113f57888601518255948401946001909101908401611120565b508582101561115d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60ff841681526040602082015260006111b360408301848661116d565b95945050505050565b602080825260119082015270125b9d985b1a59081c995d9a595dc81251607a1b604082015260600190565b67ffffffffffffffff8311156111ff576111ff61100e565b6112138361120d8354611024565b8361105e565b6000601f841160018114611247576000851561122f5750838201355b600019600387901b1c1916600186901b1783556112a1565b600083815260209020601f19861690835b828110156112785786850135825560209485019460019092019101611258565b50868210156112955760001960f88860031b161c19848701351681555b505060018560011b0183555b5050505050565b6020815260006112bc60208301848661116d565b94935050505056fea264697066735822122077998394d758e8ff139a0a951835b3255dee7e22e0eb9b7b626ba5a1636ee6f664736f6c63430008140033",
  "devdoc": {
    "details": "Assumes cryptographic proof validity was checked before registry interaction.      Ownable for potential future administrative functions (e.g., migration).",
    "errors": {
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "addReview(bytes32,address,string,uint8,bytes32,string)": {
        "details": "Adds a new review. Intended to be called only by the ReviewRegistry contract.",
        "params": {
          "content": "Review text content.",
          "nullifier": "Unique identifier from ZK proof (MUST be unique).",
          "productId": "ID of the product being reviewed.",
          "rating": "Numerical rating (1-5).",
          "reviewerAddress": "Address of the user submitting the review.",
          "serviceName": "Name of the service (e.g., \"Gumroad\", \"Luma\")."
        },
        "returns": {
          "_0": "The ID of the newly added review."
        }
      },
      "constructor": {
        "details": "Constructor sets the initial owner of the contract."
      },
      "deleteReview(uint256)": {
        "details": "Allows the original reviewer or the contract owner to \"delete\" a review      by clearing its content. The review entry itself remains.",
        "params": {
          "reviewId": "ID of the review to delete."
        }
      },
      "getProductReviews(bytes32)": {
        "details": "Gets all review IDs for a specific product.",
        "params": {
          "productId": "ID of the product."
        },
        "returns": {
          "_0": "Array of review IDs."
        }
      },
      "getReview(uint256)": {
        "details": "Retrieves a review by its ID.",
        "params": {
          "reviewId": "ID of the review to retrieve."
        },
        "returns": {
          "content": "Review content.",
          "id": "Review ID.",
          "productId": "Product ID.",
          "rating": "Review rating.",
          "reviewer": "Address of the reviewer.",
          "serviceName": "Name of the service.",
          "timestamp": "Review timestamp."
        }
      },
      "getReviewerReviews(address)": {
        "details": "Gets all review IDs submitted by a specific reviewer.",
        "params": {
          "reviewer": "Address of the reviewer."
        },
        "returns": {
          "_0": "Array of review IDs."
        }
      },
      "isNullifierUsed(bytes32)": {
        "details": "Public view function to check if a nullifier has been used.      Can be called by ReviewRegistry or external entities.",
        "params": {
          "_nullifier": "The nullifier to check."
        },
        "returns": {
          "isUsed": "True if the nullifier exists in the usedNullifiers mapping."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updateReviewContent(uint256,string)": {
        "details": "Allows the original reviewer to update the content of their review.",
        "params": {
          "newContent": "New review content.",
          "reviewId": "ID of the review to update."
        }
      }
    },
    "title": "ReviewStorage",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addReview(bytes32,address,string,uint8,bytes32,string)": {
        "notice": "Checks for nullifier uniqueness before storing."
      }
    },
    "notice": "Stores reviews submitted through the ReviewRegistry and enforces nullifier uniqueness.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/ReviewStorage.sol:ReviewStorage",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 705,
        "contract": "contracts/ReviewStorage.sol:ReviewStorage",
        "label": "reviewCount",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 727,
        "contract": "contracts/ReviewStorage.sol:ReviewStorage",
        "label": "reviews",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Review)722_storage)"
      },
      {
        "astId": 732,
        "contract": "contracts/ReviewStorage.sol:ReviewStorage",
        "label": "productReviews",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 737,
        "contract": "contracts/ReviewStorage.sol:ReviewStorage",
        "label": "reviewerReviews",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 741,
        "contract": "contracts/ReviewStorage.sol:ReviewStorage",
        "label": "usedNullifiers",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Review)722_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct ReviewStorage.Review)",
        "numberOfBytes": "32",
        "value": "t_struct(Review)722_storage"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Review)722_storage": {
        "encoding": "inplace",
        "label": "struct ReviewStorage.Review",
        "members": [
          {
            "astId": 707,
            "contract": "contracts/ReviewStorage.sol:ReviewStorage",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 709,
            "contract": "contracts/ReviewStorage.sol:ReviewStorage",
            "label": "productId",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 711,
            "contract": "contracts/ReviewStorage.sol:ReviewStorage",
            "label": "reviewer",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 713,
            "contract": "contracts/ReviewStorage.sol:ReviewStorage",
            "label": "content",
            "offset": 0,
            "slot": "3",
            "type": "t_string_storage"
          },
          {
            "astId": 715,
            "contract": "contracts/ReviewStorage.sol:ReviewStorage",
            "label": "rating",
            "offset": 0,
            "slot": "4",
            "type": "t_uint8"
          },
          {
            "astId": 717,
            "contract": "contracts/ReviewStorage.sol:ReviewStorage",
            "label": "nullifier",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          },
          {
            "astId": 719,
            "contract": "contracts/ReviewStorage.sol:ReviewStorage",
            "label": "timestamp",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 721,
            "contract": "contracts/ReviewStorage.sol:ReviewStorage",
            "label": "serviceName",
            "offset": 0,
            "slot": "7",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}